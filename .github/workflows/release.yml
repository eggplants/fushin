name: release

"on":
  push:
    tags:
      - "v*.*.*"

env:
  APP_NAME: "fushin"
  NIM_VERSION: "1.6.6"
  MAINTAINER: "eggplants"

jobs:
  # pypi:
  #   runs-on: ubuntu-latest
  #   env:
  #     CHOOSENIM_NO_ANALYTICS: 1
  #     TWINE_NON_INTERACTIVE: 1
  #     TWINE_USERNAME: __token__
  #     TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
  #     MAIN_MODULE: "src/fushin.nim"
  #     SUB_MODULE: "src/fushinpkg/submodule.nim"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Cache Nim resources
  #       id: cache_nim
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.choosenim
  #           ~/.nimble
  #         key: nimcaches-${{ env.NIM_VERSION }}-${{ matrix.vm }}
  #     - uses: jiro4989/setup-nim-action@v1
  #       with:
  #         nim-version: ${{ env.NIM_VERSION }}
  #     - name: Nimble
  #       run: |
  #         nimble -y refresh
  #         nimble -y install nimpy nimquery cligen
  #     - name: Compile
  #       run: |
  #         nim c --app:lib --gc:arc \
  #               --out:${{ env.APP_NAME }}.so ${{ env.SUB_MODULE }}
  #         # nim c --app:lib --gc:arc \
  #         #       --experimental:strictFuncs --out:fushin.so ${{ env.MAIN_MODULE }}
  #     - uses: actions/setup-python@v4
  #       with:
  #         cache: pip
  #         cache-dependency-path: setup.cfg
  #         python-version: "3.10"
  #     - name: Update Pip
  #       run: pip install --upgrade --disable-pip-version-check pip setuptools twine
  #     - name: Publish to PYPI
  #       run: |
  #         python setup.py --verbose sdist --format=zip
  #         rm --verbose --force --recursive *.so *.pyd *.egg-info/
  #         twine upload --verbose --disable-progress-bar dist/*.zip
  release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release on GitHub
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: |
            If you want, please see changelogs:
            [changelogs](https://github.com/${{ env.MAINTAINER }}/${{ env.APP_NAME }}/blob/development/CHANGES.md)
          draft: false
          prerelease: false
  build:
    needs: release
    runs-on: ${{ matrix.vm }}
    strategy:
      matrix:
        include:
          - name: linux
            vm: ubuntu-latest
          - name: macosx
            vm: macos-latest
          - name: windows
            vm: windows-latest
    steps:
      - uses: actions/checkout@v1
      - name: Cache Nim resources
        id: cache_nim
        uses: actions/cache@v3
        with:
          path: |
            ~/.choosenim
            ~/.nimble
          key: nimcaches--${{ matrix.vm }}
      - uses: jiro4989/setup-nim-action@v1
        with:
          nim-version: ${{ env.NIM_VERSION }}
      - name: Run main
        run: |
          nimble build -d:release -Y
          nimble bundle
      - name: Package(unix,mac)
        if: runner.os != 'Windows'
        uses: thedoctor0/zip-release@master
        with:
          type: tar
          directory: ${{ env.APP_NAME }}-${{ github.ref_name }}/
          filename: ../${{ env.APP_NAME }}-${{ github.ref_name }}_${{ matrix.name }}.tar.gz
      - name: Package(win)
        if: runner.os == 'Windows'
        uses: thedoctor0/zip-release@master
        with:
          type: zip
          directory: ${{ env.APP_NAME }}-${{ github.ref_name }}/
          filename: ../${{ env.APP_NAME }}-${{ github.ref_name }}_${{ matrix.name }}.zip
      - name: Upload to release(unix,mac)
        if: runner.os != 'Windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ env.APP_NAME }}-${{ github.ref_name }}_${{ matrix.name }}.tar.gz
          asset_name: ${{ env.APP_NAME }}-${{ github.ref_name }}_${{ matrix.name }}.tar.gz
          asset_content_type: application/gzip
      - name: Upload to release(win)
        if: runner.os == 'Windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ env.APP_NAME }}-${{ github.ref_name }}_${{ matrix.name }}.zip
          asset_name: ${{ env.APP_NAME }}-${{ github.ref_name }}_${{ matrix.name }}.zip
          asset_content_type: application/zip
