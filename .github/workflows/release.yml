name: release

"on":
  push:
    tags:
      - 'v*.*.*'

env:
  APP_NAME: 'fushin'
  NIM_VERSION: '1.6.6'
  MAINTAINER: 'eggplants'
  DESC: 'Fetch fushinsha serif data and save as csv files'
  CHOOSENIM_NO_ANALYTICS: 1
  TWINE_NON_INTERACTIVE: 1
  TWINE_USERNAME: __token__
  TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
  MAIN_MODULE: "src/fushin.nim"

jobs:
  pypi:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          cache: pip
          cache-dependency-path: setup.cfg
          python-version: "3.10"
      - name: Update Python PIP
        run: pip install --upgrade --disable-pip-version-check pip setuptools twine
      - name: Cache choosenim
        id: cache-choosenim
        uses: actions/cache@v1
        with:
          path: ~/.choosenim
          key: ${{ runner.os }}-choosenim-$NIM_VERSION
      - name: Cache nimble
        id: cache-nimble
        uses: actions/cache@v1
        with:
          path: ~/.nimble
          key: ${{ runner.os }}-nimble-$NIM_VERSION
      - name: Install Nim via Choosenim
        if: steps.cache-choosenim.outputs.cache-hit != 'true' || steps.cache-nimble.outputs.cache-hit != 'true'
        run: |
          curl https://nim-lang.org/choosenim/init.sh -sSf > init.sh
          sh init.sh -y
      - name: Nimble Refresh
        run: |
          export PATH=$HOME/.nimble/bin:$PATH
          nimble -y refresh
      - name: Nimble Install dependencies
        run: |
          export PATH=$HOME/.nimble/bin:$PATH
          nimble -y install nimpy
      - name: Prepare Files
        run: |
          mkdir --verbose --parents dist/
          rm --verbose --force --recursive *.c *.h *.so *.pyd *.egg-info/ dist/*.zip
          cp --verbose --force ~/.choosenim/toolchains/nim-$CHOOSENIM_CHOOSE_VERSION/lib/nimbase.h nimbase.h
      - name: Compile to C
        run: |
          export PATH=$HOME/.nimble/bin:$PATH
          nim compileToC --compileOnly -d:release -d:danger -d:ssl --threads:on --app:lib --opt:speed --gc:markAndSweep --nimcache:. $MAIN_MODULE
      - name: Publish to PYPI
        run: |
          python3 setup.py --verbose sdist --formats=zip
          rm --verbose --force --recursive *.c *.h *.so *.pyd *.egg-info/
          twine upload --verbose --disable-progress-bar dist/*.zip
  build-artifact:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macOS-latest
    steps:
      - uses: actions/checkout@v3
      - uses: jiro4989/setup-nim-action@v1
        with:
          nim-version: ${{ env.NIM_VERSION }}
      - run: nimble build -Y -d:release
      - name: Create artifact
        run: |
          os="${{ runner.os }}"
          assets="${{ env.APP_NAME }}_$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')"
          echo "$assets"
          mkdir -p "dist/$assets"
          cp -r bin LICENSE README.* "dist/$assets/"
          (
            cd dist
            if [[ "${{ runner.os }}" == Windows ]]; then
              7z a "$assets.zip" "$assets"
            else
              tar czf "$assets.tar.gz" "$assets"
            fi
            ls -lah *.*
          )
        shell: bash
      - uses: actions/upload-artifact@v3
        with:
          name: artifact-${{ matrix.os }}
          path: |
            dist/*.tar.gz
            dist/*.zip

  build-linux-packages:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: jiro4989/setup-nim-action@v1
        with:
          nim-version: ${{ env.NIM_VERSION }}
      - run: nimble build -Y -d:release

      - name: create sample script
        run: |
          mkdir -p .debpkg/usr/bin
          mkdir -p .rpmpkg/usr/bin
          cp -p bin/* .debpkg/usr/bin/
          cp -p bin/* .rpmpkg/usr/bin/
      - uses: jiro4989/build-deb-action@v2
        with:
          package: ${{ env.APP_NAME }}
          package_root: .debpkg
          maintainer: ${{ env.MAINTAINER }}
          version: ${{ github.ref }}
          arch: 'amd64'
          desc: '${{ env.DESC }}'

      - uses: jiro4989/build-rpm-action@v2
        with:
          summary: '${{ env.DESC }}'
          package: ${{ env.APP_NAME }}
          package_root: .rpmpkg
          maintainer: ${{ env.MAINTAINER }}
          version: ${{ github.ref }}
          arch: 'x86_64'
          desc: '${{ env.DESC }}'

      - uses: actions/upload-artifact@v3
        with:
          name: artifact-deb
          path: |
            ./*.deb

      - uses: actions/upload-artifact@v3
        with:
          name: artifact-rpm
          path: |
            ./*.rpm
            !./*-debuginfo-*.rpm

  create-release:
    runs-on: ubuntu-latest
    needs:
      - build-artifact
      - build-linux-packages
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Generate changelog
        run: |
          wget https://github.com/git-chglog/git-chglog/releases/download/0.9.1/git-chglog_linux_amd64
          chmod +x git-chglog_linux_amd64
          mv git-chglog_linux_amd64 git-chglog
          ./git-chglog --output ./changelog $(git describe --tags $(git rev-list --tags --max-count=1))

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body_path: ./changelog
          draft: false
          prerelease: false

      - name: Write upload_url to file
        run: echo '${{ steps.create-release.outputs.upload_url }}' > upload_url.txt

      - uses: actions/upload-artifact@v3
        with:
          name: create-release
          path: upload_url.txt

  upload-release:
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            asset_name_suffix: linux.tar.gz
            asset_content_type: application/gzip
          - os: windows-latest
            asset_name_suffix: windows.zip
            asset_content_type: application/zip
          - os: macOS-latest
            asset_name_suffix: macos.tar.gz
            asset_content_type: application/gzip
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact-${{ matrix.os }}

      - uses: actions/download-artifact@v3
        with:
          name: create-release

      - id: vars
        run: |
          echo "::set-output name=upload_url::$(cat upload_url.txt)"

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.vars.outputs.upload_url }}
          asset_path: ${{ env.APP_NAME }}_${{ matrix.asset_name_suffix }}
          asset_name: ${{ env.APP_NAME }}_${{ matrix.asset_name_suffix }}
          asset_content_type: ${{ matrix.asset_content_type }}

  upload-linux-packages:
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - pkg: deb
            asset_content_type: application/vnd.debian.binary-package
          - pkg: rpm
            asset_content_type: application/x-rpm
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact-${{ matrix.pkg }}

      - uses: actions/download-artifact@v3
        with:
          name: create-release

      - id: vars
        run: |
          echo "::set-output name=upload_url::$(cat upload_url.txt)"
          echo "::set-output name=asset_name::$(ls *.${{ matrix.pkg }} | head -n 1)"

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.vars.outputs.upload_url }}
          asset_path: ${{ steps.vars.outputs.asset_name }}
          asset_name: ${{ steps.vars.outputs.asset_name }}
          asset_content_type: ${{ matrix.asset_content_type }}
